"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[168],{6327:(n,e,t)=>{t.d(e,{l:()=>m});var i=t(1539),r=t(6987),a=t(70),o=t(9067),l=t(4669),s=t(9484);class m extends i.W{constructor(){super(...arguments),this._planeSize=null}withPlaneSize(n){return this._planeSize=n,this}make(){return this.gameObjectBuilder.withComponent(r.N,(n=>{n.offset=-100})).withComponent(a.n,(n=>{n.chunkSize=15,n.filter.brightness=1.5,n.tileResolutionX=16,n.tileResolutionY=16,o.E.loadImageFromPath(s.Z).then((e=>{var t,i;if(!n.exists)return;n.imageSources=[new l.I(e,18,13)];const r={i:0,a:24},a=null!=(t=null==(i=this._planeSize)?void 0:i.ref)?t:51,o=[];for(let n=0;n<a;n++){o[n]=[];for(let e=0;e<a;e++)o[n][e]=r}const s=Math.floor(a/2);n.drawTileFromTwoDimensionalArray(o,-s,-s)}))}))}}},2440:(n,e,t)=>{t.d(e,{Y:()=>u});var i=t(1539),r=t(9384),a=t(6987),o=t(590),l=t(9067),s=t(4669),m=t(4587),d=t(70),c=t(9484);class u extends i.W{constructor(){super(...arguments),this._collideTilemap=new r.s}getCollideTilemap(n){return this._collideTilemap=n,this}make(){return this.gameObjectBuilder.withComponent(a.N,(n=>{n.offset=-98})).withComponent(o.F,(n=>{n.chunkSize=15,n.filter.brightness=1.5,n.tileResolutionX=16,n.tileResolutionY=16,l.E.loadImageFromPath(c.Z).then((e=>{if(!n.exists)return;function t(n){return{i:0,a:n}}n.imageSources=[new s.I(e,18,13)];const i={o:()=>t(93),O:()=>t(94),"#":()=>t(61),"@":()=>t(75),$:()=>t(76),"*":()=>t(58),"^":()=>t(59)," ":()=>null};n.drawTileFromTwoDimensionalArray(m.d.map(["              ","   $          ","    #         ","              ","              "],i),-3,4),n.drawTileFromTwoDimensionalArray(m.d.map(["             ","          o  ","         @   ","     #       ","             ","             ","O            "],i),-7,-8)}))})).withComponent(d.n,(n=>{n.chunkSize=15,n.filter.brightness=1.5,n.tileResolutionX=16,n.tileResolutionY=16,l.E.loadImageFromPath(c.Z).then((e=>{if(!n.exists)return;function t(n){return{i:0,a:n}}n.imageSources=[new s.I(e,18,13)];const i={"\u3161":()=>t(47),"\u3163":()=>t(46),"\u3155":()=>t(11),"\u3151":()=>t(29),"\u314f":()=>t(44),"\u3153":()=>t(45),"\u3157":()=>t(62),"\u315c":()=>t(63),"\u3131":()=>t(8),"\u3134":()=>t(26),"\u3132":()=>t(9),"\u3139":()=>t(27),"\u315b":()=>t(28),"\u3160":()=>t(10),"\u3147":()=>null};n.drawTileFromTwoDimensionalArray(m.d.map(["\u3160","\u3134\u3131","\u3147\u314f\u3161\u3161\u3161\u3161\u3161\u3155","\u3147\u315b"],i),-3,4),n.drawTileFromTwoDimensionalArray(m.d.map(["\u3147\u3147\u3147\u3147\u3147\u3147\u3160","\u3147\u3147\u3147\u3147\u3147\u3147\u3163","\u3151\u3161\u3161\u3161\u3161\u3161\u3157\u3161\u315c\u3161\u3161\u3161\u3161\u3161\u3161\u3155","\u3147\u3147\u3147\u3147\u3147\u3147\u3147\u3147\u315b"],i),-8,-1),n.drawTileFromTwoDimensionalArray(m.d.map(["\u3147\u3147\u3147\u3147\u3147\u3160","\u3147\u3147\u3147\u3147\u3147\u3163","\u3147\u3147\u3147\u3147\u3147\u3163","\u3132\u3161\u3161\u3161\u3161\u3139","\u3163\u3147\u3147\u3147\u3147\u3147","\u315b\u3147\u3147\u3147\u3147\u3147"],i),-5,-8),n.drawTileFromTwoDimensionalArray(m.d.map(["\u3160","\u3163","\u3163","\u3163","\u3163","\u315b\u3147\u3147\u3147\u3147\u3147"],i),-5,-15);const r={"^":()=>t(56),"%":()=>t(57),"*":()=>t(72),"&":()=>t(73),"!":()=>t(90),"~":()=>t(91),o:()=>t(74),O:()=>t(92)," ":()=>null};n.drawTileFromTwoDimensionalArray(m.d.map(["     ^","","^ %  ~*"],r),3,4),n.drawTileFromTwoDimensionalArray(m.d.map(["O%    ^"," ^","","^  %"],r),1,-1),n.drawTileFromTwoDimensionalArray(m.d.map(["%     ^"," ","      *~","    % !~","     !**","o   !**~"],r),-2,-8)}))})).getComponent(o.F,this._collideTilemap)}}},1900:(n,e,t)=>{t.d(e,{P:()=>k});var i=t(1539),r=t(9384),a=t(6987),o=t(590),l=t(9067),s=t(4669),m=t(70),d=t(9484),c=t(6120);const u={i:0,a:4},p={i:0,a:5},h={i:0,a:7},w={i:0,a:22},y={i:0,a:25},g={i:0,a:40},b={i:0,a:41},f={i:0,a:43};class T{static make(n,e,t,i){const r=Array(e);for(let a=0;a<e;a++){r[a]=Array(n);for(let e=0;e<n;e++)r[a][e]=null}r[0][0]=u;for(let a=1;a<n-1;a++)r[0][a]=p;r[0][n-1]=h;for(let a=1;a<e-1;a++)r[a][0]=w,r[a][n-1]=y;r[e-1][0]=g;for(let a=1;a<n-1;a++)r[e-1][a]=b;return r[e-1][n-1]=f,null!==t&&(r[0][t]=null),null!==i&&(r[e-1][i]=null),r}static computeEntryPosition(n,e,t,i,r){return{top:null!==e?new c.F(i+e,r+n-1):null,bottom:null!==t?new c.F(i+t,r):null}}}class k extends i.W{constructor(){super(...arguments),this._collideTilemap=new r.s}getCollideTilemap(n){return this._collideTilemap=n,this}make(){return this.gameObjectBuilder.withComponent(a.N,(n=>{n.offset=-99})).withComponent(o.F,(n=>{n.chunkSize=15,n.filter.brightness=1.5,n.tileResolutionX=16,n.tileResolutionY=16,l.E.loadImageFromPath(d.Z).then((e=>{if(n.exists){n.imageSources=[new s.I(e,18,13)];for(const e of k._islandList)n.drawTileFromTwoDimensionalArray(T.make(e.width,e.height,e.topEntry,e.bottomEntry),e.x,e.y)}}))})).withComponent(m.n,(n=>{n.chunkSize=15,n.filter.brightness=1.5,n.tileResolutionX=16,n.tileResolutionY=16;l.E.loadImageFromPath(d.Z).then((e=>{if(n.exists){n.imageSources=[new s.I(e,18,13)];for(const e of k._islandList){const t=T.computeEntryPosition(e.height,e.topEntry,e.bottomEntry,e.x,e.y);t.top&&n.drawTile(t.top.x,t.top.y,0,6),t.bottom&&n.drawTile(t.bottom.x,t.bottom.y,0,42)}}}))})).getComponent(o.F,this._collideTilemap)}}k._islandList=[{width:16,height:6,topEntry:1,bottomEntry:2,x:-4,y:3},{width:15,height:8,topEntry:8,bottomEntry:3,x:-8,y:-9}]},125:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>f,contentTitle:()=>g,default:()=>C,frontMatter:()=>y,metadata:()=>b,toc:()=>T});var i=t(7462),r=(t(7294),t(3905)),a=t(7346),o=t(3274),l=t(2684),s=t(2182),m=t(5355),d=t(4532),c=t(6327),u=t(2440),p=t(1900);class h extends o.A{run(){const n=this.instantiater;return this.sceneBuilder.withChild(n.buildGameObject("tilemap").withChild(n.buildPrefab("background",c.l,new d.P(0,0,-2)).make()).withChild(n.buildPrefab("islands",p.P,new d.P(0,0,-1)).make())).withChild(n.buildGameObject("camera").withComponent(l.V,(n=>{n.viewSize=4})).withComponent(s.Y,(n=>{n.mouseMoveButton=0,n.maxViewSize=4})).withComponent(m.y,(n=>{n.renderWidth=50,n.renderHeight=50})))}}class w extends o.A{run(){const n=this.instantiater;return this.sceneBuilder.withChild(n.buildGameObject("tilemap").withChild(n.buildPrefab("background",c.l,new d.P(0,0,-3)).make()).withChild(n.buildPrefab("islands",p.P,new d.P(0,0,-2)).make()).withChild(n.buildPrefab("detail",u.Y,new d.P(0,0,-1)).make())).withChild(n.buildGameObject("camera").withComponent(l.V,(n=>{n.viewSize=4})).withComponent(s.Y,(n=>{n.mouseMoveButton=0,n.maxViewSize=4})).withComponent(m.y,(n=>{n.renderWidth=50,n.renderHeight=50})))}}const y={},g="Make Tilemap Layer",b={unversionedId:"tutorial-2dtopdown/make-tilemap-layer",id:"tutorial-2dtopdown/make-tilemap-layer",title:"Make Tilemap Layer",description:"This time, we'll going to make layers by stacking several tile maps.",source:"@site/docs/2-tutorial-2dtopdown/5-make-tilemap-layer.mdx",sourceDirName:"2-tutorial-2dtopdown",slug:"/tutorial-2dtopdown/make-tilemap-layer",permalink:"/the-world-engine.ts/build/docs/tutorial-2dtopdown/make-tilemap-layer",draft:!1,editUrl:"https://github.com/The-World-Space/the-world-engine.ts/tree/main/docs/docusaurus/docs/2-tutorial-2dtopdown/5-make-tilemap-layer.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tilemap Basic",permalink:"/the-world-engine.ts/build/docs/tutorial-2dtopdown/tilemap-basic"},next:{title:"Make Them Into Prefab",permalink:"/the-world-engine.ts/build/docs/tutorial-2dtopdown/make-them-into-prefab"}},f={},T=[{value:"Add Island Layer",id:"add-island-layer",level:2},{value:"Detail Layer",id:"detail-layer",level:2}],k={toc:T};function C(n){let{components:e,...t}=n;return(0,r.kt)("wrapper",(0,i.Z)({},k,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"make-tilemap-layer"},"Make Tilemap Layer"),(0,r.kt)("p",null,"This time, we'll going to make layers by stacking several tile maps.\n",(0,r.kt)("em",{parentName:"p"},"In general, maps that use all tile maps are required to layered.")),(0,r.kt)("h2",{id:"add-island-layer"},"Add Island Layer"),(0,r.kt)("p",null,"We will add one more tile map and overlap it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/asset/Bootstrapper.ts"',title:'"src/asset/Bootstrapper.ts"'},'.withChild(instantiater.buildGameObject("tilemap")\n    .withChild(instantiater.buildGameObject("background", new Vector3(0, 0, -2))\n        .withComponent(CssTilemapChunkRenderer, c => {\n            //...\n        }))\n\n    .withChild(instantiater.buildGameObject("islands", new Vector3(0, 0, -1))\n        .withComponent(CssTilemapChunkRenderer, c => {\n            c.chunkSize = 15;\n            c.filter.brightness = 1.5;\n            c.tileResolutionX = 16;\n            c.tileResolutionY = 16;\n            AsyncImageLoader.loadImageFromPath(OverworldTileset).then(image => {\n                if (!c.exists) return;\n\n                c.imageSources = [ new TileAtlasItem(image, 18, 13) ];\n\n            });\n        })))\n')),(0,r.kt)("p",null,'Tile maps were parented on a single game object "tilemap" and then added the "islands" layer.'),(0,r.kt)("p",null,"Let us draw an island on the tile map."),(0,r.kt)("p",null,"I'll create a separate function to make it procedural."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/asset/script/MakeIsland.ts"',title:'"src/asset/script/MakeIsland.ts"'},'import { Vector2 } from "three/src/Three";\n\nconst topLeft = { i: 0 as const, a: 4 };\nconst topCenter = { i: 0 as const, a: 5 };\nconst topRight = { i: 0 as const, a: 7};\nconst left = { i: 0 as const, a: 22 };\nconst right = { i: 0 as const, a: 25 };\nconst bottomLeft = { i: 0 as const, a: 40 };\nconst bottomCenter = { i: 0 as const, a: 41 };\nconst bottomRight = { i: 0 as const, a: 43 };\n\nexport class MakeIsland {\n    public static make(\n        width: number,\n        height: number,\n        topEntry: number|null,\n        bottomEntry: number| null\n    ): ({ i: 0; a: number; }|null)[][] {\n        const array2d: ({ i: 0; a: number; }|null)[][] = Array(height);\n        for (let i = 0; i < height; i++) {\n            array2d[i] = Array(width);\n            for (let j = 0; j < width; j++) {\n                array2d[i][j] = null;\n            }\n        }\n\n        array2d[0][0] = topLeft;\n        for (let i = 1; i < width - 1; i++) {\n            array2d[0][i] = topCenter;\n        }\n        array2d[0][width - 1] = topRight;\n        for (let i = 1; i < height - 1; i++) {\n            array2d[i][0] = left;\n            array2d[i][width - 1] = right;\n        }\n        array2d[height - 1][0] = bottomLeft;\n        for (let i = 1; i < width - 1; i++) {\n            array2d[height - 1][i] = bottomCenter;\n        }\n        array2d[height - 1][width - 1] = bottomRight;\n\n        if (topEntry !== null) {\n            array2d[0][topEntry] = null;\n        }\n\n        if (bottomEntry !== null) {\n            array2d[height - 1][bottomEntry] = null;\n        }\n        \n        return array2d;\n    }\n\n    public static computeEntryPosition(\n        height: number,\n        topEntry: number|null,\n        bottomEntry: number| null,\n        x: number,\n        y: number\n    ): { top: Vector2|null, bottom: Vector2|null } {\n        const top = topEntry !== null ? new Vector2(x + topEntry, y + height - 1) : null;\n        const bottom = bottomEntry !== null ? new Vector2(x + bottomEntry, y) : null;\n        return { top, bottom };\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/asset/Bootstrapper.ts"',title:'"src/asset/Bootstrapper.ts"'},'const islandList = [\n    { width: 16, height: 6, topEntry: 1, bottomEntry: 2, x: -4, y: 3 },\n    { width: 15, height: 8, topEntry: 8, bottomEntry: 3, x: -8, y: -9 }\n];\n\nreturn this.sceneBuilder\n    .withChild(instantiater.buildGameObject("tilemap")\n        .withChild(instantiater.buildGameObject("background", new Vector3(0, 0, -2))\n            .withComponent(CssTilemapChunkRenderer, c => {\n                //...\n            }))\n\n        .withChild(instantiater.buildGameObject("islands", new Vector3(0, 0, -1))\n            .withComponent(CssTilemapChunkRenderer, c => {\n                c.chunkSize = 15;\n                c.filter.brightness = 1.5;\n                c.tileResolutionX = 16;\n                c.tileResolutionY = 16;\n\n                AsyncImageLoader.loadImageFromPath(OverworldTileset).then(image => {\n                    if (!c.exists) return;\n\n                    c.imageSources = [ new TileAtlasItem(image, 18, 13) ];\n\n                    for (const island of islandList) {\n                        c.drawTileFromTwoDimensionalArray(\n                            MakeIsland.make(island.width, island.height, island.topEntry, island.bottomEntry),\n                            island.x, island.y\n                        );\n                    }\n                });\n            })\n            .withComponent(CssTilemapChunkRenderer, c => {\n                c.chunkSize = 15;\n                c.filter.brightness = 1.5;\n                c.tileResolutionX = 16;\n                c.tileResolutionY = 16;\n\n                const topEntry = 6;\n                const bottomEntry = 42;\n\n                AsyncImageLoader.loadImageFromPath(OverworldTileset).then(image => {\n                    if (!c.exists) return;\n\n                    c.imageSources = [ new TileAtlasItem(image, 18, 13) ];\n\n                    for (const island of islandList) {\n                        const entry = MakeIsland.computeEntryPosition(\n                            island.height, island.topEntry, island.bottomEntry, island.x, island.y);\n\n                        if (entry.top) c.drawTile(entry.top.x, entry.top.y, 0, topEntry);\n                        if (entry.bottom) c.drawTile(entry.bottom.x, entry.bottom.y, 0, bottomEntry);\n                    }\n                });\n            })))\n')),(0,r.kt)(a.Z,{bootstrapper:h,mdxType:"DocumentGame"}),(0,r.kt)("p",null,"look at the code, the entry is divided into components and rendered."),(0,r.kt)("p",null,"The reason for rendering the entrance separately is that this is more convenient\nfor later collision processing. We'll learn more about this later."),(0,r.kt)("h2",{id:"detail-layer"},"Detail Layer"),(0,r.kt)("p",null,"we'll going to make another layer and add small details."),(0,r.kt)("p",null,"This is completely simple labor, so you can just paste the code that I'm giving you."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/asset/Bootstrapper.ts"',title:'"src/asset/Bootstrapper.ts"'},'.withChild(instantiater.buildGameObject("background", new Vector3(0, 0, -3))\n    .withComponent(CssTilemapChunkRenderer, c => {\n        //...\n    }))\n\n.withChild(instantiater.buildGameObject("islands", new Vector3(0, 0, -2))\n    .withComponent(CssTilemapChunkRenderer, c => {\n        //...\n    })\n    .withComponent(CssTilemapChunkRenderer, c => {\n        //...\n    }))\n    \n.withChild(instantiater.buildGameObject("detail", new Vector3(0, 0, -1))\n    .withComponent(CssTilemapChunkRenderer, c => {\n        c.chunkSize = 15;\n        c.filter.brightness = 1.5;\n        c.tileResolutionX = 16;\n        c.tileResolutionY = 16;\n\n        AsyncImageLoader.loadImageFromPath(OverworldTileset).then(image => {\n            if (!c.exists) return;\n\n            c.imageSources = [ new TileAtlasItem(image, 18, 13) ];\n\n            function f(a: number): { i: 0; a: number; } {\n                return { i: 0, a: a };\n            }\n\n            const converter = {\n                //rock\n                "o": () => f(93),\n                "O": () => f(94),\n                //sign\n                "#": () => f(61),\n                //stump\n                "@": () => f(75),\n                "$": () => f(76),\n                //bush\n                "*": () => f(58),\n                "^": () => f(59),\n\n                " ": () => null\n            };\n\n            c.drawTileFromTwoDimensionalArray(\n                TwoDimensionalStringMapper.map(\n                    [\n                        "              ",\n                        "   $          ",\n                        "    #         ",\n                        "              ",\n                        "              "\n                    ],\n                    converter\n                ),\n                -3, 4\n            );\n            \n            c.drawTileFromTwoDimensionalArray(\n                TwoDimensionalStringMapper.map(\n                    [\n                        "             ",\n                        "          o  ",\n                        "         @   ",\n                        "     #       ",\n                        "             ",\n                        "             ",\n                        "O            "\n                    ],\n                    converter\n                ),\n                -7, -8\n            );\n        });\n    })\n    .withComponent(CssTilemapChunkRenderer, c => {\n        c.chunkSize = 15;\n        c.filter.brightness = 1.5;\n        c.tileResolutionX = 16;\n        c.tileResolutionY = 16;\n\n        AsyncImageLoader.loadImageFromPath(OverworldTileset).then(image => {\n            if (!c.exists) return;\n\n            c.imageSources = [ new TileAtlasItem(image, 18, 13) ];\n\n            function f(a: number): { i: 0; a: number; } {\n                return { i: 0, a: a };\n            }\n\n            const roadConverter = {\n                "\u3161": () => f(47),\n                "\u3163": () => f(46),\n                "\u3155": () => f(11),\n                "\u3151": () => f(29),\n                "\u314f": () => f(44),\n                "\u3153": () => f(45),\n                "\u3157": () => f(62),\n                "\u315c": () => f(63),\n                "\u3131": () => f(8),\n                "\u3134": () => f(26),\n                "\u3132": () => f(9),\n                "\u3139": () => f(27),\n                "\u315b": () => f(28),\n                "\u3160": () => f(10),\n                "\u3147": () => null\n            };\n\n            c.drawTileFromTwoDimensionalArray(\n                TwoDimensionalStringMapper.map(\n                    [\n                        "\u3160",\n                        "\u3134\u3131",\n                        "\u3147\u314f\u3161\u3161\u3161\u3161\u3161\u3155",\n                        "\u3147\u315b"\n                    ],\n                    roadConverter\n                ),\n                -3, 4\n            );\n\n            c.drawTileFromTwoDimensionalArray(\n                TwoDimensionalStringMapper.map(\n                    [\n                        "\u3147\u3147\u3147\u3147\u3147\u3147\u3160",\n                        "\u3147\u3147\u3147\u3147\u3147\u3147\u3163",\n                        "\u3151\u3161\u3161\u3161\u3161\u3161\u3157\u3161\u315c\u3161\u3161\u3161\u3161\u3161\u3161\u3155",\n                        "\u3147\u3147\u3147\u3147\u3147\u3147\u3147\u3147\u315b"\n                    ],\n                    roadConverter\n                ),\n                -8, -1\n            );\n\n            c.drawTileFromTwoDimensionalArray(\n                TwoDimensionalStringMapper.map(\n                    [\n                        "\u3147\u3147\u3147\u3147\u3147\u3160",\n                        "\u3147\u3147\u3147\u3147\u3147\u3163",\n                        "\u3147\u3147\u3147\u3147\u3147\u3163",\n                        "\u3132\u3161\u3161\u3161\u3161\u3139",\n                        "\u3163\u3147\u3147\u3147\u3147\u3147",\n                        "\u315b\u3147\u3147\u3147\u3147\u3147"\n                    ],\n                    roadConverter\n                ),\n                -5, -8\n            );\n\n            c.drawTileFromTwoDimensionalArray(\n                TwoDimensionalStringMapper.map(\n                    [\n                        "\u3160",\n                        "\u3163",\n                        "\u3163",\n                        "\u3163",\n                        "\u3163",\n                        "\u315b\u3147\u3147\u3147\u3147\u3147"\n                    ],\n                    roadConverter\n                ),\n                -5, -15\n            );\n\n            const foliageConverter = {\n                //grass\n                "^": () => f(56),\n                "%": () => f(57),\n                //flower\n                "*": () => f(72),\n                "&": () => f(73),\n                "!": () => f(90),\n                "~": () => f(91),\n                //rock\n                "o": () => f(74),\n                "O": () => f(92),\n\n                " ": () => null\n            };\n            \n            c.drawTileFromTwoDimensionalArray(\n                TwoDimensionalStringMapper.map(\n                    [\n                        "     ^",\n                        "",\n                        "^ %  ~*"\n                    ],\n                    foliageConverter\n                ),\n                3, 4\n            );\n\n            c.drawTileFromTwoDimensionalArray(\n                TwoDimensionalStringMapper.map(\n                    [\n                        "O%    ^",\n                        " ^",\n                        "",\n                        "^  %"\n                    ],\n                    foliageConverter\n                ),\n                1, -1\n            );\n\n            c.drawTileFromTwoDimensionalArray(\n                TwoDimensionalStringMapper.map(\n                    [\n                        "%     ^",\n                        " ",\n                        "      *~",\n                        "    % !~",\n                        "     !**",\n                        "o   !**~"\n                    ],\n                    foliageConverter\n                ),\n                -2, -8\n            );\n        });\n    }))\n')),(0,r.kt)(a.Z,{bootstrapper:w,mdxType:"DocumentGame"}))}C.isMDXComponent=!0},9484:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/Overworld_Tileset-1c44075b314e79caada3455aa25f5809.png"}}]);