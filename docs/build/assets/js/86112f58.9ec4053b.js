"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[894],{8659:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var o=n(7462),a=(n(7294),n(3905));const i={},r="Get Component",s={unversionedId:"getting-started/get-component",id:"getting-started/get-component",title:"Get Component",description:"Let's look at how to get a Component or GameObject from a Component.",source:"@site/docs/1-getting-started/6-get-component.md",sourceDirName:"1-getting-started",slug:"/getting-started/get-component",permalink:"/the-world-engine.ts/build/docs/getting-started/get-component",draft:!1,editUrl:"https://github.com/The-World-Space/the-world-engine.ts/tree/main/docs/docusaurus/docs/1-getting-started/6-get-component.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Create Component: Sprite Animations",permalink:"/the-world-engine.ts/build/docs/getting-started/sprite-animations"},next:{title:"Prefab",permalink:"/the-world-engine.ts/build/docs/getting-started/prefab"}},p={},m=[{value:"method1: this.gameObject.getComponent()",id:"method1-thisgameobjectgetcomponent",level:2},{value:"method2: inject from builder",id:"method2-inject-from-builder",level:2}],c={toc:m};function l(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"get-component"},"Get Component"),(0,a.kt)("p",null,"Let's look at how to get a Component or GameObject from a Component."),(0,a.kt)("h2",{id:"method1-thisgameobjectgetcomponent"},"method1: this.gameObject.getComponent()"),(0,a.kt)("p",null,"You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"getComponent()")," to get a Components which is attached to a GameObject."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Component, CssSpriteRenderer } from "the-world-engine";\n\nexport class GetComponentTest extends Component {\n    private _sprite: CssSpriteRenderer|null = null;\n\n    public awake(): void {\n        this._sprite = this.gameObject.getComponent(CssSpriteRenderer);\n    }\n}\n')),(0,a.kt)("p",null,"you can also use ",(0,a.kt)("inlineCode",{parentName:"p"},"getComponents()")," to get all Components which are attached to a GameObject.\nand you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"getComponentsInChildren()")," to get a Component which is attached to a GameObject or its children."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Component, CssSpriteRenderer } from "the-world-engine";\n\nexport class GetComponentTest extends Component {\n    public awake(): void {\n        const components = this.gameObject.getComponents();\n        const component = this.gameObject.getComponentInChildren(CssSpriteRenderer);\n        const componentsInChildren = this.gameObject.getComponentsInChildren(CssSpriteRenderer);\n    }\n}\n')),(0,a.kt)("h2",{id:"method2-inject-from-builder"},"method2: inject from builder"),(0,a.kt)("p",null,"This is how the component injects the dependency into the component rather than importing it."),(0,a.kt)("p",null,"This method is similar to unity Game Engine's Inspector Drag and Drop"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Component, Bootstrapper as BaseBootstrapper, SceneBuilder, PrefabRef, Camera } from "the-world-engine";\n\nclass Component1 extends Component {\n    public _component2: Component2|null = null;\n\n    public awake(): void {\n        this._component2!.sayHello();\n    }\n}\n\nclass Component2 extends Component {\n    public sayHello(): void {\n        console.log("Hello");\n    }\n}\n\nexport class Bootstrapper extends BaseBootstrapper {\n    public override run(): SceneBuilder {\n        \n        const instantiater = this.instantiater;\n        const component2 = new PrefabRef<Component2>(); // create a prefab ref\n\n        return this.sceneBuilder\n            .withChild(instantiater.buildGameObject("camera")\n                .withComponent(Camera))\n\n            .withChild(instantiater.buildGameObject("gameObject1")\n                .withComponent(Component1, c => {\n                    c._component2 = component2.ref!; // inject the dependency\n                }))\n\n            .withChild(instantiater.buildGameObject("gameObject2")\n                .withComponent(Component2)\n                .getComponent(Component2, component2)) // set the prefab ref\n        ;\n    }\n}\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Component initialize functions(c => { }) run after the scene is built.\nBecause of this, it is possible to inject regardless of the initialization order between components"),(0,a.kt)("p",{parentName:"admonition"},"In this example, even though the ",(0,a.kt)("inlineCode",{parentName:"p"},".getComponent(Component2, component2))")," code is at the bottom of ",(0,a.kt)("inlineCode",{parentName:"p"},"c._component2 = component2.ref!;"),", it works fine")),(0,a.kt)("p",null,"You can also inject GameObjects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Component, Bootstrapper as BaseBootstrapper, SceneBuilder, PrefabRef, Camera, GameObject } from "the-world-engine";\n\nclass Component3 extends Component {\n    public player: GameObject|null = null;\n\n    public awake(): void {\n        this.player!.transform.position.set(0, 0, 0);\n    }\n}\n\nexport class Bootstrapper extends BaseBootstrapper {\n    public override run(): SceneBuilder {\n        \n        const instantiater = this.instantiater;\n        const player = new PrefabRef<GameObject>(); // create a prefab ref\n\n        return this.sceneBuilder\n            .withChild(instantiater.buildGameObject("camera")\n                .withComponent(Camera))\n\n            .withChild(instantiater.buildGameObject("player")\n                .getGameObject(player)) // set the prefab ref\n\n            .withChild(instantiater.buildGameObject("gameObject1")\n                .withComponent(Component3, c => {\n                    c.player = player.ref!; // inject the dependency\n                }))\n        ;\n    }\n}\n')),(0,a.kt)("p",null,"Depending on the situation, you choose the proper method."))}l.isMDXComponent=!0}}]);