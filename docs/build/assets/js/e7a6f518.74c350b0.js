"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[314],{2137:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var a=t(7462),r=(t(7294),t(3905));const i={},o="Make Them Into Prefab",l={unversionedId:"tutorial-2dtopdown/make-them-into-prefab",id:"tutorial-2dtopdown/make-them-into-prefab",title:"Make Them Into Prefab",description:"Prefab is a feature created based on the design of Prefab of Unity.",source:"@site/docs/2-tutorial-2dtopdown/6-make-them-into-prefab.md",sourceDirName:"2-tutorial-2dtopdown",slug:"/tutorial-2dtopdown/make-them-into-prefab",permalink:"/the-world-engine.ts/build/docs/tutorial-2dtopdown/make-them-into-prefab",draft:!1,editUrl:"https://github.com/The-World-Space/the-world-engine.ts/tree/main/docs/docusaurus/docs/2-tutorial-2dtopdown/6-make-them-into-prefab.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Make Tilemap Layer",permalink:"/the-world-engine.ts/build/docs/tutorial-2dtopdown/make-tilemap-layer"},next:{title:"Player",permalink:"/the-world-engine.ts/build/docs/tutorial-2dtopdown/player"}},s={},m=[{value:"Our problem",id:"our-problem",level:2},{value:"Make Tilemap Into Prefab",id:"make-tilemap-into-prefab",level:2},{value:"Make Background Prefab",id:"make-background-prefab",level:3},{value:"Make Island Prefab",id:"make-island-prefab",level:3},{value:"Make Detail Prefab",id:"make-detail-prefab",level:3},{value:"Build Prefab",id:"build-prefab",level:2}],d={toc:m};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"make-them-into-prefab"},"Make Them Into Prefab"),(0,r.kt)("p",null,"Prefab is a feature created ",(0,r.kt)("strong",{parentName:"p"},"based on the design of ",(0,r.kt)("a",{parentName:"strong",href:"https://docs.unity3d.com/2022.1/Documentation/Manual/Prefabs.html"},"Prefab of Unity")),"."),(0,r.kt)("p",null,"However, in fact, the use of prefab itself ",(0,r.kt)("strong",{parentName:"p"},"is similar to the React component"),"."),(0,r.kt)("p",null,"After you put the content to build the game object in the prefab, you can build the prefab from the bootstrapper."),(0,r.kt)("p",null,"Of course, you can dynamically add prefabs to a scene, but we won't cover it here."),(0,r.kt)("h2",{id:"our-problem"},"Our problem"),(0,r.kt)("p",null,"So far, the bootstrapper's code has become huge while building a tile map.\nAt this rate, it will be very difficult to manage the code."),(0,r.kt)("h2",{id:"make-tilemap-into-prefab"},"Make Tilemap Into Prefab"),(0,r.kt)("p",null,"So let's make the tile map building process into a prefab."),(0,r.kt)("h3",{id:"make-background-prefab"},"Make Background Prefab"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/asset/prefab/world/BacgroundPrefab.ts"',title:'"src/asset/prefab/world/BacgroundPrefab.ts"'},'import {\n    AsyncImageLoader,\n    CssTilemapChunkRenderer,\n    GameObjectBuilder,\n    Prefab,\n    PrefabRef,\n    TileAtlasItem\n} from "the-world-engine";\n\nimport OverworldTileset from "../../image/Overworld_Tileset.png";\n\nexport class BackgroundPrefab extends Prefab {\n    private _planeSize: PrefabRef<number>|null = null;\n\n    public withPlaneSize(value: PrefabRef<number>): this {\n        this._planeSize = value;\n        return this;\n    }\n\n    public override make(): GameObjectBuilder {\n\n        return this.gameObjectBuilder\n            .withComponent(CssTilemapChunkRenderer, c => {\n                c.chunkSize = 15;\n                c.filter.brightness = 1.5;\n                c.tileResolutionX = 16;\n                c.tileResolutionY = 16;\n\n                AsyncImageLoader.loadImageFromPath(OverworldTileset).then(image => {\n                    if (!c.exists) return;\n\n                    c.imageSources = [ new TileAtlasItem(image, 18, 13) ];\n\n                    const grass = { i: 0 as const, a: 24 };\n                    const planeSize = this._planeSize?.ref ?? 51;\n\n                    const array2d: { i: 0; a: number; }[][] = [];\n                    for (let i = 0; i < planeSize; i++) {\n                        array2d[i] = [];\n                        for (let j = 0; j < planeSize; j++) {\n                            array2d[i][j] = grass;\n                        }\n                    }\n\n                    const planeSizeHalf = Math.floor(planeSize / 2);\n\n                    c.drawTileFromTwoDimensionalArray(\n                        array2d,\n                        -planeSizeHalf, -planeSizeHalf\n                    );\n                });\n            })\n        ;\n    }\n}\n')),(0,r.kt)("p",null,"First, I changed the background layer to prefab."),(0,r.kt)("p",null,"How to create a prefab is simple. You can implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"make")," method after inheriting the Prefab class."),(0,r.kt)("p",null,"use ",(0,r.kt)("inlineCode",{parentName:"p"},"PrefabRef")," to export or import values from the prefab.\nIn the case of this code, the plane size can be specified from the outside through the ",(0,r.kt)("inlineCode",{parentName:"p"},"withPlaneSize")," method."),(0,r.kt)("h3",{id:"make-island-prefab"},"Make Island Prefab"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/asset/prefab/world/IslandPrefab.ts"',title:'"src/asset/prefab/world/IslandPrefab.ts"'},'import {\n    AsyncImageLoader,\n    CssTilemapChunkRenderer,\n    GameObjectBuilder,\n    Prefab,\n    TileAtlasItem\n} from "the-world-engine";\n\nimport OverworldTileset from "../../image/Overworld_Tileset.png";\nimport { MakeIsland } from "../../script/MakeIsland";\n\nexport class IslandPrefab extends Prefab {\n    private static readonly _islandList = [\n        { width: 16, height: 6, topEntry: 1, bottomEntry: 2, x: -4, y: 3 },\n        { width: 15, height: 8, topEntry: 8, bottomEntry: 3, x: -8, y: -9 }\n    ];\n\n    public override make(): GameObjectBuilder {\n\n        return this.gameObjectBuilder\n            .withComponent(CssTilemapChunkRenderer, c => {\n                c.chunkSize = 15;\n                c.filter.brightness = 1.5;\n                c.tileResolutionX = 16;\n                c.tileResolutionY = 16;\n\n                AsyncImageLoader.loadImageFromPath(OverworldTileset).then(image => {\n                    if (!c.exists) return;\n\n                    c.imageSources = [ new TileAtlasItem(image, 18, 13) ];\n\n                    for (const island of IslandPrefab._islandList) {\n                        c.drawTileFromTwoDimensionalArray(\n                            MakeIsland.make(island.width, island.height, island.topEntry, island.bottomEntry),\n                            island.x, island.y\n                        );\n                    }\n                });\n            })\n            .withComponent(CssTilemapChunkRenderer, c => {\n                c.chunkSize = 15;\n                c.filter.brightness = 1.5;\n                c.tileResolutionX = 16;\n                c.tileResolutionY = 16;\n\n                const topEntry = 6;\n                const bottomEntry = 42;\n\n                AsyncImageLoader.loadImageFromPath(OverworldTileset).then(image => {\n                    if (!c.exists) return;\n\n                    c.imageSources = [ new TileAtlasItem(image, 18, 13) ];\n\n                    for (const island of IslandPrefab._islandList) {\n                        const entry = MakeIsland.computeEntryPosition(\n                            island.height, island.topEntry, island.bottomEntry, island.x, island.y);\n\n                        if (entry.top) c.drawTile(entry.top.x, entry.top.y, 0, topEntry);\n                        if (entry.bottom) c.drawTile(entry.bottom.x, entry.bottom.y, 0, bottomEntry);\n                    }\n                });\n            })\n        ;\n    }\n}\n')),(0,r.kt)("p",null,"you can separate the scope of the code by creating a prefab. in this case, ",(0,r.kt)("inlineCode",{parentName:"p"},"islandList")," is become to private static variable."),(0,r.kt)("h3",{id:"make-detail-prefab"},"Make Detail Prefab"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/asset/prefab/world/DetailPrefab.ts"',title:'"src/asset/prefab/world/DetailPrefab.ts"'},'import {\n    AsyncImageLoader,\n    CssTilemapChunkRenderer,\n    GameObjectBuilder,\n    Prefab,\n    PrefabRef,\n    TileAtlasItem,\n    TwoDimensionalStringMapper\n} from "the-world-engine";\n\nimport OverworldTileset from "../../image/Overworld_Tileset.png";\n\nexport class DetailPrefab extends Prefab {\n    public override make(): GameObjectBuilder {\n        return this.gameObjectBuilder\n            .withComponent(CssTilemapChunkRenderer, c => {\n                c.chunkSize = 15;\n                c.filter.brightness = 1.5;\n                c.tileResolutionX = 16;\n                c.tileResolutionY = 16;\n\n                AsyncImageLoader.loadImageFromPath(OverworldTileset).then(image => {\n                    if (!c.exists) return;\n\n                    c.imageSources = [ new TileAtlasItem(image, 18, 13) ];\n\n                    function f(a: number): { i: 0; a: number; } {\n                        return { i: 0, a: a };\n                    }\n\n                    const converter = {\n                        //rock\n                        "o": () => f(93),\n                        "O": () => f(94),\n                        //sign\n                        "#": () => f(61),\n                        //stump\n                        "@": () => f(75),\n                        "$": () => f(76),\n                        //bush\n                        "*": () => f(58),\n                        "^": () => f(59),\n\n                        " ": () => null\n                    };\n\n                    c.drawTileFromTwoDimensionalArray(\n                        TwoDimensionalStringMapper.map(\n                            [\n                                "              ",\n                                "   $          ",\n                                "    #         ",\n                                "              ",\n                                "              "\n                            ],\n                            converter\n                        ),\n                        -3, 4\n                    );\n                    \n                    c.drawTileFromTwoDimensionalArray(\n                        TwoDimensionalStringMapper.map(\n                            [\n                                "             ",\n                                "          o  ",\n                                "         @   ",\n                                "     #       ",\n                                "             ",\n                                "             ",\n                                "O            "\n                            ],\n                            converter\n                        ),\n                        -7, -8\n                    );\n                });\n            })\n            .withComponent(CssTilemapChunkRenderer, c => {\n                c.chunkSize = 15;\n                c.filter.brightness = 1.5;\n                c.tileResolutionX = 16;\n                c.tileResolutionY = 16;\n\n                AsyncImageLoader.loadImageFromPath(OverworldTileset).then(image => {\n                    if (!c.exists) return;\n\n                    c.imageSources = [ new TileAtlasItem(image, 18, 13) ];\n\n                    function f(a: number): { i: 0; a: number; } {\n                        return { i: 0, a: a };\n                    }\n\n                    const roadConverter = {\n                        "\u3161": () => f(47),\n                        "\u3163": () => f(46),\n                        "\u3155": () => f(11),\n                        "\u3151": () => f(29),\n                        "\u314f": () => f(44),\n                        "\u3153": () => f(45),\n                        "\u3157": () => f(62),\n                        "\u315c": () => f(63),\n                        "\u3131": () => f(8),\n                        "\u3134": () => f(26),\n                        "\u3132": () => f(9),\n                        "\u3139": () => f(27),\n                        "\u315b": () => f(28),\n                        "\u3160": () => f(10),\n                        "\u3147": () => null\n                    };\n\n                    c.drawTileFromTwoDimensionalArray(\n                        TwoDimensionalStringMapper.map(\n                            [\n                                "\u3160",\n                                "\u3134\u3131",\n                                "\u3147\u314f\u3161\u3161\u3161\u3161\u3161\u3155",\n                                "\u3147\u315b"\n                            ],\n                            roadConverter\n                        ),\n                        -3, 4\n                    );\n\n                    c.drawTileFromTwoDimensionalArray(\n                        TwoDimensionalStringMapper.map(\n                            [\n                                "\u3147\u3147\u3147\u3147\u3147\u3147\u3160",\n                                "\u3147\u3147\u3147\u3147\u3147\u3147\u3163",\n                                "\u3151\u3161\u3161\u3161\u3161\u3161\u3157\u3161\u315c\u3161\u3161\u3161\u3161\u3161\u3161\u3155",\n                                "\u3147\u3147\u3147\u3147\u3147\u3147\u3147\u3147\u315b"\n                            ],\n                            roadConverter\n                        ),\n                        -8, -1\n                    );\n\n                    c.drawTileFromTwoDimensionalArray(\n                        TwoDimensionalStringMapper.map(\n                            [\n                                "\u3147\u3147\u3147\u3147\u3147\u3160",\n                                "\u3147\u3147\u3147\u3147\u3147\u3163",\n                                "\u3147\u3147\u3147\u3147\u3147\u3163",\n                                "\u3132\u3161\u3161\u3161\u3161\u3139",\n                                "\u3163\u3147\u3147\u3147\u3147\u3147",\n                                "\u315b\u3147\u3147\u3147\u3147\u3147"\n                            ],\n                            roadConverter\n                        ),\n                        -5, -8\n                    );\n\n                    c.drawTileFromTwoDimensionalArray(\n                        TwoDimensionalStringMapper.map(\n                            [\n                                "\u3160",\n                                "\u3163",\n                                "\u3163",\n                                "\u3163",\n                                "\u3163",\n                                "\u315b\u3147\u3147\u3147\u3147\u3147"\n                            ],\n                            roadConverter\n                        ),\n                        -5, -15\n                    );\n\n                    const foliageConverter = {\n                        //grass\n                        "^": () => f(56),\n                        "%": () => f(57),\n                        //flower\n                        "*": () => f(72),\n                        "&": () => f(73),\n                        "!": () => f(90),\n                        "~": () => f(91),\n                        //rock\n                        "o": () => f(74),\n                        "O": () => f(92),\n\n                        " ": () => null\n                    };\n                    \n                    c.drawTileFromTwoDimensionalArray(\n                        TwoDimensionalStringMapper.map(\n                            [\n                                "     ^",\n                                "",\n                                "^ %  ~*"\n                            ],\n                            foliageConverter\n                        ),\n                        3, 4\n                    );\n\n                    c.drawTileFromTwoDimensionalArray(\n                        TwoDimensionalStringMapper.map(\n                            [\n                                "O%    ^",\n                                " ^",\n                                "",\n                                "^  %"\n                            ],\n                            foliageConverter\n                        ),\n                        1, -1\n                    );\n\n                    c.drawTileFromTwoDimensionalArray(\n                        TwoDimensionalStringMapper.map(\n                            [\n                                "%     ^",\n                                " ",\n                                "      *~",\n                                "    % !~",\n                                "     !**",\n                                "o   !**~"\n                            ],\n                            foliageConverter\n                        ),\n                        -2, -8\n                    );\n                });\n            })\n        ;\n    }    \n}\n')),(0,r.kt)("h2",{id:"build-prefab"},"Build Prefab"),(0,r.kt)("p",null,"All you have to do is add a prefab to the bootstrapper."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/asset/Bootstrapper.ts"',title:'"src/asset/Bootstrapper.ts"'},'export class Bootstrapper extends BaseBootstrapper {\n    public override run(): SceneBuilder {\n        const instantiater = this.instantiater;\n\n        return this.sceneBuilder\n            .withChild(instantiater.buildGameObject("tilemap")\n                .withChild(instantiater.buildPrefab("background", BackgroundPrefab, new Vector3(0, 0, -3))\n                    .make())\n\n                .withChild(instantiater.buildPrefab("islands", IslandPrefab, new Vector3(0, 0, -2))\n                    .make())\n                    \n                .withChild(instantiater.buildPrefab("detail", DetailPrefab, new Vector3(0, 0, -1))\n                    .make()))\n\n            .withChild(instantiater.buildGameObject("camera")\n                .withComponent(Camera)\n                .withComponent(EditorCameraController, c => {\n                    c.mouseMoveButton = 0;\n                })\n                .withComponent(EditorGridRenderer, c => {\n                    c.renderWidth = 50;\n                    c.renderHeight = 50;\n                }))\n        ;\n    }\n}\n')),(0,r.kt)("p",null,"Looking good. From now on, We will build gameObject as possible as we can."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Making a prefab is quite cumbersome, so if you make a prototype quickly, you don't have to make a prefab."),(0,r.kt)("p",{parentName:"admonition"},"If you need to clean up the scene later, you can make a prefab.")))}p.isMDXComponent=!0}}]);