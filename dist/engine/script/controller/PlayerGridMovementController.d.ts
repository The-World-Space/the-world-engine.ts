import { Vector2 } from "three";
import { GridPointer } from "../input/GridPointer";
import { IGridCollidable } from "../physics/IGridCollidable";
import { Directionable } from "../helper/Directionable";
import { IGridPositionable } from "../helper/IGridPositionable";
export declare class PlayerGridMovementController extends Directionable implements IGridPositionable {
    protected readonly _disallowMultipleComponent: boolean;
    private _speed;
    private _gridCellHeight;
    private _gridCellWidth;
    private _collideMaps;
    private readonly _collideSize;
    private readonly _gridCenter;
    private readonly _currentGridPosition;
    private readonly _targetGridPosition;
    private readonly _initPosition;
    private readonly _onMoveToTargetDelegates;
    private readonly _onMovedToTargetDelegates;
    private _onPointerDownBind;
    private _gridPointer;
    private _pathfinder;
    private _movingByPathfinder;
    private _findedPath;
    private _currentPathIndex;
    private _pathfindStartFunction;
    private readonly _tempVector3;
    private readonly _tempVector2;
    protected start(): void;
    update(): void;
    private processInput;
    private noncheckProcessInput;
    private invokeOnMoveToTarget;
    private invokeOnMovedToTarget;
    private tryCancelPathfinder;
    private processPathfinderInput;
    private processMovement;
    private checkCollision;
    private _lastPointerDownTime;
    private readonly _lastPointerDownPosition;
    private _doubleClickTime;
    private onPointerDown;
    private onDoubleClick;
    private tryStartPathfind;
    addOnMoveToTargetEventListener(delegate: (x: number, y: number) => void): void;
    removeOnMoveToTargetEventListener(delegate: (x: number, y: number) => void): void;
    addOnMovedToTargetEventListener(delegate: (x: number, y: number) => void): void;
    removeOnMovedToTargetEventListener(delegate: (x: number, y: number) => void): void;
    get speed(): number;
    set speed(value: number);
    get gridCenter(): Vector2;
    set gridCenter(value: Vector2);
    get gridCellHeight(): number;
    set gridCellHeight(value: number);
    get gridCellWidth(): number;
    set gridCellWidth(value: number);
    set initPosition(value: Vector2);
    set gridPointer(value: GridPointer | null);
    get gridPointer(): GridPointer | null;
    addCollideMap(collideMap: IGridCollidable): void;
    setGridInfoFromCollideMap(collideMap: IGridCollidable): void;
    get positionInGrid(): Vector2;
}
