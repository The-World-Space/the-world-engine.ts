import { Vector2 } from "three";
import { Component } from "../../hierarchy_object/Component";
import { IGridCollidable } from "../physics/IGridCollidable";
export declare class PointerGridEvent {
    private _gridPosition;
    private _position;
    private _button;
    constructor(gridPosition: Vector2, position: Vector2, button: number);
    get gridPosition(): Vector2;
    get position(): Vector2;
    get button(): number;
}
export declare class PointerGridInputListener extends Component {
    protected readonly _disallowMultipleComponent: boolean;
    private _css3DObject;
    private _htmlDivElement;
    private _gridCellWidth;
    private _gridCellHeight;
    private readonly _gridCenter;
    private _inputWidth;
    private _inputHeight;
    private _zindex;
    private _onPointerDownDelegates;
    private _onPointerUpDelegates;
    private _onPointerEnterDelegates;
    private _onPointerLeaveDelegates;
    private _onPointerMoveDelegates;
    private _onTouchStartFunc;
    private _touchMoveOccured;
    private readonly _onMouseDownBind;
    private readonly _onMouseUpBind;
    private readonly _onMouseEnterBind;
    private readonly _onMouseLeaveBind;
    private readonly _onMouseMoveBind;
    private readonly _onTouchStartBind;
    private readonly _ononTouchEndBind;
    private readonly _onTouchMoveBind;
    private readonly _onTouchCancelBind;
    protected start(): void;
    private readonly _tempVector3;
    update(): void;
    onDestroy(): void;
    onSortByZaxis(zaxis: number): void;
    private createPointerGridEventFromOffset;
    private onMouseDown;
    private onMouseUp;
    private onMouseEnter;
    private onMouseLeave;
    private onMouseMove;
    private simulateMouseEvent;
    private onTouchStart;
    private onTouchEnd;
    private onTouchMove;
    private onTouchCancel;
    addOnPointerDownEventListener(delegate: (event: PointerGridEvent) => void): void;
    addOnPointerUpEventListener(delegate: (event: PointerGridEvent) => void): void;
    addOnPointerEnterEventListener(delegate: (event: PointerGridEvent) => void): void;
    addOnPointerLeaveEventListener(delegate: (event: PointerGridEvent) => void): void;
    addOnPointerMoveEventListener(delegate: (event: PointerGridEvent) => void): void;
    removeOnPointerDownEventListener(delegate: (event: PointerGridEvent) => void): void;
    removeOnPointerUpEventListener(delegate: (event: PointerGridEvent) => void): void;
    removeOnPointerEnterEventListener(delegate: (event: PointerGridEvent) => void): void;
    removeOnPointerLeaveEventListener(delegate: (event: PointerGridEvent) => void): void;
    removeOnPointerMoveEventListener(delegate: (event: PointerGridEvent) => void): void;
    get gridCenter(): Vector2;
    set gridCenter(value: Vector2);
    get gridCellWidth(): number;
    set gridCellWidth(value: number);
    get gridCellHeight(): number;
    set gridCellHeight(value: number);
    setGridInfoFromCollideMap(collideMap: IGridCollidable): void;
    get inputWidth(): number;
    set inputWidth(value: number);
    get inputHeight(): number;
    set inputHeight(value: number);
}
